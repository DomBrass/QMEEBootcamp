Starting weekly assessment for Dominic, Week3

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.50 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week1, Assessment, Week2, .git, Week3

Found the following files in parent directory: README.txt, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
My QMEE Repo
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: Week1, Week2, Week3

The Week3 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK3...

Found the following directories: Code, Data

Found the following files: Readme.txt

Checking for readme file in weekly directory...

Found README in parent directory, named: Readme.txt

Printing contents of Readme.txt:
**********************************************************************
My QMEE Bootcamp Repository for Week 3

The excercises for R week.

Contents:

####Code#####

Contains the excercises for Week 3.

apply1.R - Examples of using the apply family of functions.
apply2.R - Further examples of using apply.
basic_io.R - Sript illustrating inputs and outputs.
boilerplate.R - A boilerplate.
break.R - Illustrates how break works.
browser.R - Demonstrates browser function.
control.R - Examples of control flow.
DataWrangTidy.R - Wrangles data.
get_TreeHeight.R - Calculates tree height from input file and outputs as csv.
Maps.R - Plots map of GPDD data.
next.R - Illustrates how to use next.
preallocate.R - Example of preallocation.
PP_Lattice.R - Produces lattice plots of predator prey data.
PP_Regress.R - Producees the required plot.
TAutoCorr.R - Performs autocorrelation on temperature data.
TreeHeight.R - Calculates the heights of trees from distance from base and angle to top.
try.R - Example of use of try.
run_get_TreeHeight.R - Tests get_TreeHeight.R
sample.R - Example of how sampling works.
Vectorize1.R - Example of vectorization.
Vectorize2.R - Vectorized stochastic Ricker equation.



####Data####

Contains data for use in Week 3 practicles.

EcolArchives-E089-51-D1.csv - Predator-Prey metabolic data.
GPDDFiltered.RData - Longitude and latitude of measurements of endangered species data.
KeyWestAnnualMeanTemperature.RData - Annual mean temperature measuremnts for Key West of 100 yyears
PoundHillData.csv - Data from ecological survey of species distribution.
PoundHillMetaData.csv - Meta data for Pound Hill data set.
trees.csv - Measurements of distance from base and angle to top of trees.

####Results####

Empty repositroy where results may be sent.

####Sandbox####

Assorted toy examples.
**********************************************************************

Results directory missing!

Creating Results directory...

Found 21 code files: PP_Regress.R, apply1.R, sample.R, run_get_TreeHeight.sh, boilerplate.R, TreeHeight.R, PP_Lattice.R, next.R, Maps.R, Vectorize1.R, break.R, basic_io.R, try.R, apply2.R, get_TreeHeight.R, TAutoCorr.R, browser.R, Vectorize2.R, DataWrangTidy.R, preallocate.R, control.R

Found the following extra files: .RData, .Rhistory
0.5 pt deducted per extra file

Current Points = 99.0

======================================================================
Testing script/code files...

======================================================================
Inspecting script file PP_Regress.R...

File contents are:
**********************************************************************
require(ggplot2)
require(dplyr)

MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")

ggplot(data = MyDF, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage))+
  geom_point(shape = 3)+
  geom_smooth(method='lm',formula=y~x, fullrange = TRUE) +
  facet_wrap(~Type.of.feeding.interaction, ncol = 1, strip.position = "right") +
  scale_y_continuous(name = "Prey Mass in grams", labels = scales::scientific) +
  scale_x_continuous(name = "Predator Mass in grams", labels = scales::scientific) +
  theme(legend.position="bottom")
  
**********************************************************************

Testing PP_Regress.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Loading required package: ggplot2
Loading required package: dplyr

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
In qt((1 - level)/2, df) : NaNs produced

======================================================================
Inspecting script file apply1.R...

File contents are:
**********************************************************************
## apply: applying the same function to rows/columns of a matrix

## Build a random matrix
M <- matrix(rnorm(100), 10, 10)

## Take the mean of each row
RowMeans <- apply(M, 1, mean)
print (RowMeans)

## Now the variance
RowVars <- apply(M, 1, var)
print(RowVars)

## By column
ColMeans <- apply(M, 2, var)
print (ColMeans)**********************************************************************

Testing apply1.R...

Output (only first 500 characters): 

**********************************************************************
 [1]  0.13292097 -0.07348580  0.34908638  0.13905421  0.19333086  0.11263883
 [7]  0.01523773  0.32953253 -0.34002454  0.21495731
 [1] 2.1533498 2.3335268 0.7008055 0.8975405 0.8309390 1.5031853 0.9386279
 [8] 0.8071766 1.8785253 1.0210101
 [1] 0.9597515 1.2760918 2.0267821 1.0638402 1.3528414 0.5990793 0.9020270
 [8] 0.8778225 1.8767672 1.0784474

**********************************************************************

Code ran without errors

Time consumed = 0.06815s

======================================================================
Inspecting script file sample.R...

File contents are:
**********************************************************************
##Runs a simulation involving sampling.

x <- rnorm(50)
doit <-function(x){
    x <- sample(x, replace = TRUE)
    if(length(unique(x)) > 30){
      print(paste("Mean of this sample was:", as.character(mean(x))))
    }
}

result <- lapply(1:100, function(i) doit(x))

result <- vector("list", 100)
for( i in 1:100) {
  result[[i]] <- doit(x)
}**********************************************************************

Testing sample.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Mean of this sample was: -0.149837675607471"
[1] "Mean of this sample was: 0.0675037118858175"
[1] "Mean of this sample was: -0.168417909168103"
[1] "Mean of this sample was: 0.0356698909992136"
[1] "Mean of this sample was: -0.095708429454914"
[1] "Mean of this sample was: 0.147142858224699"
[1] "Mean of this sample was: -0.166729321237994"
[1] "Mean of this sample was: 0.067088354686978"
[1] "Mean of this sample was: -0.0552143888289348"
[1] "Mean of this sample was: -0.0609551828153738"
[
**********************************************************************

Code ran without errors

Time consumed = 0.10741s

======================================================================
Inspecting script file run_get_TreeHeight.sh...

File contents are:
**********************************************************************
Rscript get_TreeHeight.R ../Data/trees.csv**********************************************************************

Testing run_get_TreeHeight.sh...

Output (only first 500 characters): 

**********************************************************************
  [1] "Tree height is: 25.462680727681"  "Tree height is: 46.094124200205" 
  [3] "Tree height is: 15.2541806244397" "Tree height is: 16.1085376231346"
  [5] "Tree height is: 38.9782891142089" "Tree height is: 38.3661074268043"
  [7] "Tree height is: 17.5786750610666" "Tree height is: 28.5504607023457"
  [9] "Tree height is: 22.5701474298691" "Tree height is: 30.257477966697" 
 [11] "Tree height is: 29.5780499696015" "Tree height is: 30.2964612354713"
 [13] "Tree height is: 28.2539753999049" "Tre
**********************************************************************

Code ran without errors

Time consumed = 0.11222s

======================================================================
Inspecting script file boilerplate.R...

File contents are:
**********************************************************************
# A boilerplate R script

MyFunction <- function(Arg1, Arg2){
  
  print(paste("Arguement", as.character(Arg1), "is a", class(Arg1)))
  print(paste("Arguement", as.character(Arg2), "is a", class(Arg2)))
  
  return (c(Arg1, Arg2))
}

MyFunction(1,2)
MyFunction("Riki", "Tiki")**********************************************************************

Testing boilerplate.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Arguement 1 is a numeric"
[1] "Arguement 2 is a numeric"
[1] 1 2
[1] "Arguement Riki is a character"
[1] "Arguement Tiki is a character"
[1] "Riki" "Tiki"

**********************************************************************

Code ran without errors

Time consumed = 0.10975s

======================================================================
Inspecting script file TreeHeight.R...

File contents are:
**********************************************************************
# This function calculates heights of trees given distance of each
# from its base and angle to its top, using the trignometric formula.
#
# height = distance * tan(radians)
#
# ARGUEMENTS
# degrees: The angle of elevation of tree
# distance: The distance from the base of tree (e.g., meters)
#
# OUTPUT
# The heights of the tree, same units as "distance"

TreeHeight <- function(degrees, distance){
    radians <- degrees * pi / 180
    height <- distance * tan(radians)
    print(paste("Tree height is:", height))
    
    return (height)
}  

TreeData <- read.csv("../Data/trees.csv", header = TRUE, row.names = NULL) # import with headers

TreeData$Tree.Height.m <- TreeHeight(TreeData[, 2], TreeData[, 3])

write.csv(TreeData, "../Results/TreeHts.csv" , row.names = FALSE)
          **********************************************************************

Testing TreeHeight.R...

Output (only first 500 characters): 

**********************************************************************
  [1] "Tree height is: 25.462680727681"  "Tree height is: 46.094124200205" 
  [3] "Tree height is: 15.2541806244397" "Tree height is: 16.1085376231346"
  [5] "Tree height is: 38.9782891142089" "Tree height is: 38.3661074268043"
  [7] "Tree height is: 17.5786750610666" "Tree height is: 28.5504607023457"
  [9] "Tree height is: 22.5701474298691" "Tree height is: 30.257477966697" 
 [11] "Tree height is: 29.5780499696015" "Tree height is: 30.2964612354713"
 [13] "Tree height is: 28.2539753999049" "Tre
**********************************************************************

Code ran without errors

Time consumed = 0.08958s

======================================================================
Inspecting script file PP_Lattice.R...

File contents are:
**********************************************************************
require(lattice)
require(dplyr)

MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")

pdf("../Results/Prey_Lattice.pdf", 11.7, 8.3)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF)
graphics.off(); 

pdf("../Results/Pred_Lattice.pdf", 11.7, 8.3)
densityplot(~log(Prey.mass) | Type.of.feeding.interaction, data=MyDF)
graphics.off(); 

pdf("../Results/SizeRatio_Lattice.pdf", 11.7, 8.3)
densityplot(~log(Predator.mass/Prey.mass) | Type.of.feeding.interaction, data=MyDF)
graphics.off() 

Pop_stat <- group_by(MyDF, Type.of.feeding.interaction) %>%
  summarize("Mean Log Predator Mass" = log(mean(Predator.mass)), "Mean Log Prey Mass" = log(mean(Prey.mass)), 
            "Mean Log Predator Prey Mass Ratio" = log(mean(Predator.mass/Prey.mass)), 
            "Median Log Predator Mass" = log(median(Predator.mass)), "Median Log Prey Mass" = log(median(Prey.mass)), 
                      "Median Log Predator Prey Mass Ratio" = log(median(Predator.mass/Prey.mass)) ) %>%
  rename("Feeding Type" = Type.of.feeding.interaction )
  
write.csv(Pop_stat, file = "../Results/PP_results.csv", row.names = FALSE)
**********************************************************************

Testing PP_Lattice.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Loading required package: lattice
Loading required package: dplyr

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


======================================================================
Inspecting script file next.R...

File contents are:
**********************************************************************
##Example of use of next.

for (i in 1:10) {
  if ((i %% 2) == 0)
    next
  print(i)
}**********************************************************************

Testing next.R...

Output (only first 500 characters): 

**********************************************************************
[1] 1
[1] 3
[1] 5
[1] 7
[1] 9

**********************************************************************

Code ran without errors

Time consumed = 0.11414s

======================================================================
Inspecting script file Maps.R...

File contents are:
**********************************************************************
#Plots data on a map.

require (raster)
require (maps)
load("../Data/GPDDFiltered.RData")

temp1<-matrix(data = rexp(180*360, rate = 10), nrow = 360, ncol = 180)  #random matrix
r<-raster(temp1,xmn=-179.5,xmx=179.5,ymn=-89.5,ymx=89.5,crs="+proj=longlat +datum=WGS84")

plot(r)
map("world",add=T,fill=TRUE, col="white", bg="white")
points(gpdd$long, gpdd$lat)

#Biased towards well studied populations, lack of data in many regions for dataset that claims to be "global".**********************************************************************

Testing Maps.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Loading required package: raster
Loading required package: methods
Loading required package: sp
Loading required package: maps

======================================================================
Inspecting script file Vectorize1.R...

File contents are:
**********************************************************************
#Example of vecotrization.

M <- matrix(runif(1000000), 1000, 1000)

SumAllElements <- function(M){
  Dimensions <- dim(M)
  Tot <- 0
  for (i in 1:Dimensions[1]){
    for (j in 1:Dimensions[2]){
      Tot <- Tot + M[i,j]
    }
  }
return (Tot)  
}

## This on my computer takes about 1 sec
print(system.time(SumAllElements(M)))
## While this takes about 0.01 sec
print(system.time(sum(M)))
**********************************************************************

Testing Vectorize1.R...

Output (only first 500 characters): 

**********************************************************************
   user  system elapsed 
  0.080   0.004   0.081 
   user  system elapsed 
  0.000   0.000   0.001 

**********************************************************************

Code ran without errors

Time consumed = 0.22068s

======================================================================
Inspecting script file break.R...

File contents are:
**********************************************************************
#Illustrates how break works.

i <- 0
  while(i < Inf){
    if (i == 20){
      break}
    else{
      cat("i equals", i, "\n")
      i <- i + 1
    }
  }**********************************************************************

Testing break.R...

Output (only first 500 characters): 

**********************************************************************
i equals 0 
i equals 1 
i equals 2 
i equals 3 
i equals 4 
i equals 5 
i equals 6 
i equals 7 
i equals 8 
i equals 9 
i equals 10 
i equals 11 
i equals 12 
i equals 13 
i equals 14 
i equals 15 
i equals 16 
i equals 17 
i equals 18 
i equals 19 

**********************************************************************

Code ran without errors

Time consumed = 0.08392s

======================================================================
Inspecting script file basic_io.R...

File contents are:
**********************************************************************
#Simple script to illustrate R input-output.
#Run line by line to check inputs outputs to understand what is happening.

MyData <- read.csv("../Data/trees.csv", header = TRUE) # import with headers

write.csv(MyData, "../Results/MyData.csv") #write it out as a new file

write.table(MyData[1,], file = "../Results/MyData.csv",append=TRUE) # Append to it

write.csv(MyData, "../Results/MyData.csv", row.names=TRUE) # write row names

write.table(MyData, "../Results/MyData.csv", col.names=FALSE) # ignore column names**********************************************************************

Testing basic_io.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Warning message:
In write.table(MyData[1, ], file = "../Results/MyData.csv", append = TRUE) :
  appending column names to file

======================================================================
Inspecting script file try.R...

File contents are:
**********************************************************************
## run a simulation that samples from a population and uses try.

x <- rnorm(50)
doit <- function(x){
  x <- sample(x, replace = TRUE)
  if(length(unique(x)) > 30){
    print(paste("Mean of this sample was:", as.character(mean(x))))
  }
  else{
    stop("Couldn't calculate mean: too few unique points!")
  }
}

result <- lapply(1:100, function(i) try(doit(x), FALSE))                 

result <- vector("list", 100)
for(i in 1:100){
  result[[i]] <- try(doit(x), FALSE)
}
**********************************************************************

Testing try.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Mean of this sample was: -0.0886316276056761"
[1] "Mean of this sample was: 0.0857098027959523"
[1] "Mean of this sample was: -0.221691376131943"
[1] "Mean of this sample was: -0.184641805550025"
[1] "Mean of this sample was: 0.0234595138402379"
[1] "Mean of this sample was: -0.251165634109691"
[1] "Mean of this sample was: 0.0716532852761206"
[1] "Mean of this sample was: -0.0998783199936165"
[1] "Mean of this sample was: -0.0563409120927458"
[1] "Mean of this sample was: -0.090882057617060
**********************************************************************

Encountered error:
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!

======================================================================
Inspecting script file apply2.R...

File contents are:
**********************************************************************
#Further apply examples.

SomeOperation <- function(v){
  if (sum(v) > 0){
    return (v * 100)
  }
  return (v)
}

M <- matrix(rnorm(100), 10, 10)
print (apply(M, 1, SomeOperation))
**********************************************************************

Testing apply2.R...

Output (only first 500 characters): 

**********************************************************************
            [,1]         [,2]       [,3]      [,4]        [,5]       [,6]
 [1,] -1.2910350  1.105133524  194.16541  48.10229    4.615684 -130.05197
 [2,] -1.0119737 -1.763698907  -91.26198  26.99289  114.138149  173.26224
 [3,] -1.0587034 -1.271075137   33.62853 146.36683    1.282160  119.11987
 [4,]  0.4705286 -0.105942053  111.57542 -51.35710   68.615630  162.74656
 [5,]  0.1960466 -1.673163101 -110.81641  63.27420 -191.768942   91.51213
 [6,]  0.8382498 -0.660923511  -16.06888 -41.44872   45.7
**********************************************************************

Code ran without errors

Time consumed = 0.09307s

======================================================================
Inspecting script file get_TreeHeight.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript
#
# This function calculates heights of trees given distance of each
# from its base and angle to its top, using the trignometric formula.
#
# height = distance * tan(radians)
#
# ARGUEMENTS
# degrees: The angle of elevation of tree
# distance: The distance from the base of tree (e.g., meters)
# input_file: A csv file to read in
#
# OUTPUT
# The heights of the tree, same units as "distance"

TreeHeight <- function(degrees, distance){
  radians <- degrees * pi / 180
  height <- distance * tan(radians)
  print(paste("Tree height is:", height))
  
  return (height)
}  

args = commandArgs(trailingOnly=TRUE)
file_name <-tools::file_path_sans_ext(basename(args))

if (length(args)==0) {
  
  stop("At least one argument must be supplied (input file).n", call.=FALSE)

} else if (length(args)==1) {
  TreeData <- read.csv(args[1], header = TRUE, row.names = NULL) # import with headers
  
  TreeData$Tree.Height.m <- TreeHeight(TreeData[, 2], TreeData[, 3])
  
  eval(parse(text = paste0("write.csv(TreeData, '../Results/", file_name ,"_treeheights.csv' , row.names = FALSE)")))
}

**********************************************************************

Testing get_TreeHeight.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Error: At least one argument must be supplied (input file).n
Execution halted

======================================================================
Inspecting script file TAutoCorr.R...

File contents are:
**********************************************************************
load("../Data/KeyWestAnnualMeanTemperature.RData")

roe_obs <- cor(ats$Temp[-100],ats$Temp[-1])

roe_val <- rep(NA, 10000)

for(i in 1:10000){
  Temp_lag <- sample(ats$Temp, 100)
  roe_val[i] <- cor(Temp_lag[-100], Temp_lag[-1])
}

plot(density(roe_val), xlab = "Value of correlation coefficient.", ylab = " Density", main = "Density Kernel for Auto-Correlation of Temperature Data")
abline(v = roe_obs, col = "red")

sum(roe_val > roe_obs)/length(roe_val)
**********************************************************************

Testing TAutoCorr.R...

Output (only first 500 characters): 

**********************************************************************
[1] 4e-04

**********************************************************************

Code ran without errors

Time consumed = 0.59332s

======================================================================
Inspecting script file browser.R...

File contents are:
**********************************************************************
Exponential <- function(N0 = 1, r = 1, generations = 10){
  #Runs a simulation of exponential growth
  
  N <- rep(NA, generations)
  
  N[1] <- N0
  for(t in 2:generations){
    N[t] <- N[t-1] * exp(r)
    browser()
  }
  return(N)
}

plot(Exponential(), type = "1", main = "Exponential growth")**********************************************************************

Testing browser.R...

Output (only first 500 characters): 

**********************************************************************
Called from: Exponential()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()

**********************************************************************

Encountered error:
Error in plot.xy(xy, type, ...) : invalid plot type '1'
Calls: plot -> plot.default -> plot.xy
Execution halted

======================================================================
Inspecting script file Vectorize2.R...

File contents are:
**********************************************************************
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .

rm(list=ls())

stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
  #initialize
  N<-matrix(NA,numyears,length(p0))
  N[1,]<-p0
  
    for (yr in 2:numyears) #for each pop, loop through the years
    {
      N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))
    }

  return(N)
  
}


print("Vectorized Stochastic Ricker takes:")

print(system.time(res2<-stochrickvect()))
**********************************************************************

Testing Vectorize2.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Vectorized Stochastic Ricker takes:"
   user  system elapsed 
  0.040   0.000   0.042 

**********************************************************************

Code ran without errors

Time consumed = 0.12358s

======================================================================
Inspecting script file DataWrangTidy.R...

File contents are:
**********************************************************************
####################################################################
###### Wrangling the Pound Hill Dataset using dplyr and tidyr ######
####################################################################

library(dplyr)
library(tidyverse)
library(readr)
library(tidyr)

############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)%>%
  separate(2, c("Cultivation", "Block", "Plot", "Quadrat"))

MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)

############# Inspect the dataset ###############
dplyr::tbl_df(MyData) #like head(MyData)
dplyr::glimpse(MyData) # like str(MyData)

############# Transpose ###############
# To get those species into columns and treatments into rows 
MyData <- t(MyData) 


############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0

############# Convert raw matrix to data frame ###############

TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data

############# Convert from wide to long format  ###############

MyWrangledData <- gather(TempData, key = values -Cultivation, value = Count)

MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.numeric(MyWrangledData[, "Count"])

############# Start exploring the data (extend the script below)!  ###############
**********************************************************************

Testing DataWrangTidy.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Error in library(tidyverse) : there is no package called ‘tidyverse’
Execution halted

======================================================================
Inspecting script file preallocate.R...

File contents are:
**********************************************************************
#Example of preallocation.


#Naive loop
naive <- function(){
a <- NA
for (i in 1:100000) {
  a <- c(a,i)
}
}

#Preallocated version
preallocated <- function(){
b <- rep(NA, 100000)
for (i in 1:100000) {
  b[i] <- i
} 
 }

#Compares run times
print(system.time(naive()))
print(system.time(preallocated()))
**********************************************************************

Testing preallocate.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 10.00449s

======================================================================
Inspecting script file control.R...

File contents are:
**********************************************************************
## Some code exemplifying control flow constructs in R

## If statement

a <- TRUE
if (a == TRUE){
  print("a is TRUE")
} else {
  print ("a is FALSE")
}

## On a single line

z <- runif(1) ## random number
if (z <= 0.5) {
  print ("Less than a half")
}

## For loop using a sequence

for (i in 1:100){
  j <- i * i
  print(paste(i, " squared is", j))
}

## For loop of vecotr of strings
for(species in c('Heliodoxa rubinoides',
                 'Boissonneaua jardini',
                 'Sula nebouxxii'))
{
  print(paste('The species is', species))
}  

## For loop using a vector
v1 <- c("a", "bc", "def")
for (i in v1){
  print(i)
}

## While loop
i <- 0
while (i<100){
  i <- i+1
  print(i^2)
}

**********************************************************************

Testing control.R...

Output (only first 500 characters): 

**********************************************************************
[1] "a is TRUE"
[1] "Less than a half"
[1] "1  squared is 1"
[1] "2  squared is 4"
[1] "3  squared is 9"
[1] "4  squared is 16"
[1] "5  squared is 25"
[1] "6  squared is 36"
[1] "7  squared is 49"
[1] "8  squared is 64"
[1] "9  squared is 81"
[1] "10  squared is 100"
[1] "11  squared is 121"
[1] "12  squared is 144"
[1] "13  squared is 169"
[1] "14  squared is 196"
[1] "15  squared is 225"
[1] "16  squared is 256"
[1] "17  squared is 289"
[1] "18  squared is 324"
[1] "19  squared is 361"
[1] "20 
**********************************************************************

Code ran without errors

Time consumed = 0.11481s

======================================================================
======================================================================
Finished running scripts

Ran into 8 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 99.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!