Starting weekly assessment for Dominic, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.50 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week1, Assessment, Week2, .git, Week3

Found the following files in parent directory: README.txt, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
My QMEE Repo
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: Week1, Week2, Week3

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: Code, Data, Sandbox, Results

Found the following files: Readme.txt

Checking for readme file in weekly directory...

Found README in parent directory, named: Readme.txt

Printing contents of Readme.txt:
**********************************************************************
My QMEE Bootcamp Repository for Week 2

The excercises for Python week.

Contents:

####Code#####

Contains the excercises for Week 2.

align_seqs.py - Aligns sequences to find maximal matchings. 
align_seqs_fasta.py - Aligns two sequences to find maximal matchings for input sequences.
basic_csv.py - Script that reads a csv manipulates it and then writes the result.
basic_io.py - Simple script that reads and writes csvs.	
boilerplate.py - A boilerplate for python scripts.
cfexercises1.py - Some loops demonstrating control flow.
cfexercises2.py - Various functions.
control_flow.py - Some functions exemplifing the use of control statements.
debugme.py - Code with a bug to show how to debug.
dictionray.py - Creates a dictionary for given taxa.
oaks.py - Demonstration of list comprehensions.
oaks_debugme - Returns whether or not the input file contains oaks.
lc1.py - Seperates triple into component lists via loops and list comprehensions.
lc2.py - Uses list comprehensions to manipulate data.
loops.py - Various loops.
scopy.py - Script that demonstrates the difference between local and global variables.
sysargv.py - Script that demonstrates the use of sys.argv.
test_control_flow.py - Example of how to write doctests.
tuple.py - Seperates tuple of tuples printing each on a seperate lines.
using_name.py - A script that demonstrates importing modules in python.


####Data####

Contains data for use in Week 2 practicles.


fasta - As in week 1, repository for various gene sequences.
Seq_example.csv - Two example gene sequences
testcsv.csv - Species data.
TestOaksData.csv - Tree species.

####Results####

Empty repositroy where results may be sent.

####Sandbox####

Assorted toy examples.
**********************************************************************

Found following files in results directory: JustOaksData.csv, bodymass.csv, Seq_out.csv, Seq_out_fasta.csv...
ideally, Results directory should be empty other than, perhaps, a readme. 

Found 20 code files: lc2.py, boilerplate.py, basic_csv.py, cfexercises2.py, dictionary.py, debugme.py, scope.py, cfexercises1.py, tuple.py, basic_io.py, lc1.py, oaks_debugme.py, oaks.py, loops.py, using_name.py, align_seqs.py, sysargv.py, align_seqs_fasta.py, control_flow.py, test_control_flow.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file lc2.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Uses list comprehensions to manipulate data."""

__appname__ = '[lc2.py]'
__author__ = 'Dominic Brass'

# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.

high_rain = [rain for rain in rainfall if rain[1]>100]
print(high_rain)

# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 

low_rain = [rain for rain in rainfall if rain[1]<50]
print(low_rain)

# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 

high_rain_loop = []
for rain in rainfall:
    if rain[1]>100:
        high_rain_loop.append(rain)

low_rain_loop = []
for rain in rainfall:
    if rain[1]<50:
        low_rain_loop.append(rain)

print(high_rain_loop)  
print(low_rain_loop)      **********************************************************************

Testing lc2.py...

lc2.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
[('MAR', 49.9), ('SEP', 27.0)]
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
[('MAR', 49.9), ('SEP', 27.0)]

**********************************************************************

Code ran without errors

Time consumed = 0.01375s

======================================================================
Inspecting script file boilerplate.py...

File contents are:
**********************************************************************
#!usr/bin/env python3
#
#Author: Dominic Brass
#Script: boilerplate.py
#Arguements: none
#Date: Oct 2018

"""A boilerplate for python scripts."""

__appname__ = '[boilerplate.py]'
__author__ = 'Dominic Brass'

## imports ##
import sys # module to interface our program with the operating system

## constants ##

## functions ##
def main(argv):
    """Main entry point of the program """
    print('This is a boilerplate')
    return 0

if __name__ == "__main__":
    """Makes sure the "main" function is called from the command line"""
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
This is a boilerplate

**********************************************************************

Code ran without errors

Time consumed = 0.01481s

======================================================================
Inspecting script file basic_csv.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
#
#Author: Dominic Brass
#Script: basic_csv.py
#Desc: Script that reads a csv manipulates it and then writes the result.
#Arguements: none
#Date: Oct 2018

## imports ##
import sys # module to interface our program with the operating system

import csv

# Read a file containing:
# 'Species', 'Infraorder', 'Family'. 'Distribution', 'Body mass male'
f = open('../Data/testcsv.csv','r')

csvread = csv.reader(f)
temp = []
for row in csvread:
    temp.append(tuple(row))
    print(row)
    print("The species is", row[0])

f.close()

# write a file containing only species name and Body mass
f = open('../Data/testcsv.csv','r')
g = open('../Results/bodymass.csv','w')

csvread = csv.reader(f)
csvwrite = csv.writer(g)
for row in csvread:
    print(row)
    csvwrite.writerow([row[0],row[4]])

f.close()
g.close()    **********************************************************************

Testing basic_csv.py...

basic_csv.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 99

Output (only first 500 characters): 

**********************************************************************
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
('The species is', 'Species')
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
('The species is', 'Daubentonia_madagascariensis')
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
('The species is', 'Allocebus_trichotis')
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
('The species is', 'Avahi_laniger')
['Avahi_occidentalis', 'Lemurifo
**********************************************************************

Code ran without errors

Time consumed = 0.01600s

======================================================================
Inspecting script file cfexercises2.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
#
#Author: Dominic Brass
#Script: cfexcercises2.py
#Arguements: none
#Date: Oct 2018

"""Various functions."""

## imports ##
import sys # module to interface our program with the operating system

## constants ##

## functions ##

def foo_1(x=1):
    """Function that raises an input to the power of 0.5."""
    return x ** 0.5

def foo_2(x=2,y=3):
    """Function that returns the largest of two inputs."""
    if x > y:
        return x
    return y

def foo_3(x=1, y=2, z=3):
    """Function that orders the inputs."""
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return [x, y, z]

def foo_4(x=3):
    """Computes factorials"""
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result

def foo_5(x=1):
    """Computes factorials"""
    if x == 1:
        return 1
    return x*foo_5(x - 1)

def foo_6(x): # Calculate the factorial of x in a different way
    """Computes factorials"""
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto    

def main(argv): 
    print(foo_1(10)) 
    print(foo_2(10,1)) 
    print(foo_3(10,9,8)) 
    print(foo_4(10)) 
    print(foo_5(10)) 
    print(foo_6(10))

if (__name__ == "__main__"):
    """Makes sure the "main" function is called from the command line"""
    status = main(sys.argv)
    sys.exit(status)**********************************************************************

Testing cfexercises2.py...

cfexercises2.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
3.16227766017
10
[9, 8, 10]
3628800
3628800
3628800

**********************************************************************

Code ran without errors

Time consumed = 0.01657s

======================================================================
Inspecting script file dictionary.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Creates dictionary from list of taxa."""

__appname__ = '[dictionary.py]'
__author__ = 'Dominic Brass'

taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Write a short python script to populate a dictionary called taxa_dic 
# derived from  taxa so that it maps order names to sets of taxa. 
# E.g. 'Chiroptera' : set(['Myotis lucifugus']) etc. 


# ALSO, PLEASE INCLUDE A DOCSTRING AT THE BEGINNING OF THIS FILE THAT 
# SAYS WHAT THE SCRIPT DOES AND WHO THE AUTHOR IS

# Write your script here:

def Convert(tup, di): 
    for a, b in tup: 
        di.setdefault(a, []).append(b) 
    return di 

taxa1 = [x[::-1] for x in taxa]
taxa_dict = {}
taxa_dict = ((Convert(taxa1, taxa_dict)))

print(taxa_dict)**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
{'Rodentia': ['Gerbillus henleyi', 'Peromyscus crinitus', 'Mus domesticus', 'Cleithrionomys rutilus'], 'Afrosoricida': ['Microgale dobsoni', 'Microgale talazaci'], 'Chiroptera': ['Myotis lucifugus'], 'Carnivora': ['Lyacon pictus', 'Arctocephalus gazella', 'Canis lupus']}

**********************************************************************

Code ran without errors

Time consumed = 0.01498s

======================================================================
Inspecting script file debugme.py...

File contents are:
**********************************************************************
#!/usr/bin/python

"""Example of how to write doctests."""

__appname__ = '[debugme.py]'
__author__ = 'Dominic Brass'

def createabug(x):
    y = x**4
    z = 0.
    y = y/z
    return y

createabug(25)**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Traceback (most recent call last):
  File "debugme.py", line 14, in <module>
    createabug(25)
  File "debugme.py", line 11, in createabug
    y = y/z
ZeroDivisionError: float division by zero

======================================================================
Inspecting script file scope.py...

File contents are:
**********************************************************************
#!usr/bin/env python3
#
#Author: Dominic Brass
#Script: scope.py
#Arguements: none
#Date: Oct 2018

"""Script that demonstrates the difference between local and global variables."""

## Try this first

_a_global = 10

def a_function():
    _a_global = 5
    _a_local = 4
    print("Inside the function, the value is ", _a_global)
    print("Inside the fuction, the value is ", _a_local)
    return None

a_function()

print("Outside the function, the value is ", _a_global)

## Now try this

_a_global = 10

def a_function():
    global _a_global
    _a_global = 5
    _a_local = 4
    print("Inside the function, the value is ", _a_global)
    print ("inside the function, the value is ", _a_local)
    return None

a_function()
print("Outside the function the value is", _a_global)**********************************************************************

Testing scope.py...

scope.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
('Inside the function, the value is ', 5)
('Inside the fuction, the value is ', 4)
('Outside the function, the value is ', 10)
('Inside the function, the value is ', 5)
('inside the function, the value is ', 4)
('Outside the function the value is', 5)

**********************************************************************

Code ran without errors

Time consumed = 0.01319s

======================================================================
Inspecting script file cfexercises1.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
#
#Author: Dominic Brass
#Script: cfexcercises1.py
#Arguements: none
#Date: Oct 2018

"""Some loops demonstrating control flow."""

for i in range(3,17):
    print('hello')

for j in range(12):
    if j % 3 == 0:
        print('hello')

for j in range(15): 
    if j % 5 == 3:
        print('hello')
    elif j % 4 == 3:
        print('hello')

z = 0
while z != 15:
    print('hello')
    z = z + 3

z = 12 
while z < 100:
    if z == 31:
        for k in range(7):
            print("hello")
    elif z == 18:
        print("hello")
    z =  z + 1                                     **********************************************************************

Testing cfexercises1.py...

cfexercises1.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello

**********************************************************************

Code ran without errors

Time consumed = 0.01306s

======================================================================
Inspecting script file tuple.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Seperates tuple of tuples printing each on a seperate lines."""

__appname__ = '[tuple.py]'
__author__ = 'Dominic Brass'

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by species 
# Hints: use the "print" command! You can use list comprehension!

# ANNOTATE WHAT EVERY BLOCK OR IF NECESSARY, LINE IS DOING! 

# ALSO, PLEASE INCLUDE A DOCSTRING AT THE BEGINNING OF THIS FILE THAT 
# SAYS WHAT THE SCRIPT DOES AND WHO THE AUTHOR IS

for a, b, c in birds:

  print(a, b, c)**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
('Passerculus sandwichensis', 'Savannah sparrow', 18.7)
('Delichon urbica', 'House martin', 19)
('Junco phaeonotus', 'Yellow-eyed junco', 19.5)
('Junco hyemalis', 'Dark-eyed junco', 19.6)
('Tachycineata bicolor', 'Tree swallow', 20.2)

**********************************************************************

Code ran without errors

Time consumed = 0.01308s

======================================================================
Inspecting script file basic_io.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
#
#Author: Dominic Brass
#Script: basic_io.py
#Desc: Simple script that reads and writes csvs.
#Arguements: none
#Date: Oct 2018

#####################
# FILE INPUT
#####################

# Open a file for reading
f = open('../Sandbox/test.txt', 'r')
# use "implicit" for loop:
# if the object is a file, python will cycle pveer lines
for line in f:
    print(line)

#close the file
f.close()

#Same example, skip blank lines
f = open('../Sandbox/test.txt', 'r')
for line in f:
    if len(line.strip()) > 0:
        print(line)

f.close()

#######################
# FILE OUTPUT
#######################
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../Sandbox/testout.txt','w')
for i in list_to_save:
    f.write(str(i) + '\n')

f.close()

######################
# STORING OBJECTS
######################
# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}

import pickle

f = open('../Sandbox/testp.p', 'wb') ## nothe the b: accept binary files
pickle.dump(my_dictionary, f)
f.close()

## Load the data again
f = open('../Sandbox/testp.p','rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)**********************************************************************

Testing basic_io.py...

basic_io.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 98

Output (only first 500 characters): 

**********************************************************************
First Line

Second Line



Third Line



Fourth Line.

First Line

Second Line

Third Line

Fourth Line.

{'another key': 11, 'a key': 10}

**********************************************************************

Code ran without errors

Time consumed = 0.02100s

======================================================================
Inspecting script file lc1.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Seperates triple into component lists"""

__appname__ = '[lc1.py]'
__author__ = 'Dominic Brass'

## imports ##
import sys # module to interface our program with the operating system


birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 

latin = [x[0] for x in birds]

common = [x[1] for x in birds]

body_mass = [x[2] for x in birds]

print(latin)
print(common)
print(body_mass)

# (2) Now do the same using conventional loops (you can shoose to do this 
# before 1 !). 

latin_loop = set()
for latin_name in birds:
    latin_loop.add(latin_name[0])


common_loop = set()
for common_name in birds:
    common_loop.add(common_name[1])

mass_loop = set()
for mass_name in birds:
    mass_loop.add(mass_name[2])

print(latin_loop)
print(common_loop)
print(mass_loop)

**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]
set(['Junco hyemalis', 'Passerculus sandwichensis', 'Junco phaeonotus', 'Tachycineata bicolor', 'Delichon urbica'])
set(['Savannah sparrow', 'House martin', 'Dark-eyed junco', 'Yellow-eyed junco', 'Tree swallow'])
set([19.5, 20.2, 19, 18.7, 19.6])

**********************************************************************

Code ran without errors

Time consumed = 0.01485s

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:
**********************************************************************
#!/usr/bin/python

"""Aligns two sequences to find maximal matchings."""

__appname__ = '[oaks_debugme.py]'
__author__ = 'Dominic Brass'

import csv
import sys
import pdb
import doctest

#Define function
def is_an_oak(name):
    """ Returns True if name is starts with 'quercus' 
    >>> is_an_oak('Fraxinus sylvatica')
    False
    
    >>> is_an_oak('Quercus asd')
    True

    >>> is_an_oak('Quercuss asd')
    False

    >>> is_an_oak('qquercus asd')
    False
    """
    return name.lower().split(" ")[0] == 'quercus'

def main(argv): 
    f = open('../Data/TestOaksData.csv','r')
    g = open('../Results/JustOaksData.csv','w')
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    csvwrite.writerow(["Genus","Species"])
    next(taxa) # Skip header line.
    oaks = set()
    for row in taxa:
        print(row)
        print ("The genus is: ") 
        print(row[0])
        if is_an_oak(row[0]) == True:
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])  
    
    return 0
    f.flush()
    f.close() 
    g.flush()
    g.close() 
    
if (__name__ == "__main__"):
    status = main(sys.argv)**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
['Quercus', ' robur']
The genus is: 
Quercus
FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus
['Pinus', ' sylvestris']
The genus is: 
Pinus
['Quercus', ' cerris']
The genus is: 
Quercus
FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quercus
FOUND AN OAK!


**********************************************************************

Code ran without errors

Time consumed = 0.03804s

======================================================================
Inspecting script file oaks.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
#
#Author: Dominic Brass
#Script: oaks.py
#Arguements: none
#Date: Oct 2018

"""Demonstrations of list comprehensions."""

taxa = [ 'Quercus robur',
        'Fraxinus excelsior',
        'Pinus sylvestris',
        'Quercus cerris',
        'Quercus petraea'
    ]

def is_an_oak(name):
    return name.lower().startswith('quercus ')

oaks_loops = set()

for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
set(['Quercus robur', 'Quercus cerris', 'Quercus petraea'])
set(['Quercus robur', 'Quercus cerris', 'Quercus petraea'])
set(['QUERCUS ROBUR', 'QUERCUS CERRIS', 'QUERCUS PETRAEA'])
set(['QUERCUS ROBUR', 'QUERCUS CERRIS', 'QUERCUS PETRAEA'])

**********************************************************************

Code ran without errors

Time consumed = 0.01295s

======================================================================
Inspecting script file loops.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
#
#Author: Dominic Brass
#Script: loops.py
#Arguements: none
#Date: Oct 2018

"""Various loops."""

for i in range(5):
    print(i)

my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

z = 0
while z < 100:
    z = z + 1
    print(z)

b = True
while b:
    print("GERONIMO! infinite loop! ctrl+c to stop!")**********************************************************************

Testing loops.py...

loops.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c
**********************************************************************

Code ran without errors

Time consumed = 10.60571s

======================================================================
Inspecting script file using_name.py...

File contents are:
**********************************************************************
#!usr/bin/env python3
#
#Author: Dominic Brass
#Script: using_name.py
#Arguements: none
#Date: Oct 2018

"""A script that demonstrates importing modules in python."""

if __name__ == '__main__':
    print('This program is being run by itself')
else:
    print('I am being imported from another module')    **********************************************************************

Testing using_name.py...

using_name.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
This program is being run by itself

**********************************************************************

Code ran without errors

Time consumed = 0.08577s

======================================================================
Inspecting script file align_seqs.py...

File contents are:
**********************************************************************
#!/usr/bin/python

"""Aligns sequences to find maximal matchings."""

__appname__ = '[align_seqs.py]'
__author__ = 'Dominic Brass'

import csv
import copy

seq_input = open('../Data/Seq_example.csv', 'r')
seq_output = open('../Results/Seq_out.csv', 'w')
# These are the two sequences to match

csvread = csv.reader(seq_input)
temp = []
for row in csvread:
    temp.append(row)


seq2 = temp[0][0]
seq1 = temp[1][0]

print(seq1)
print(seq2)
# assign the longest sequence s1, and the shortest to s2
# l1 is the length of the longest, l2 that of the shortest

l1 = len(seq1)
l2 = len(seq2)
if l1 >= l2:
    s1 = seq1
    s2 = seq2
else:
    s1 = seq2
    s2 = seq1
    l1, l2 = l2, l1 # swap the two lengths

# function that computes a score
# by returning the number of matches 
# starting from arbitrary startpoint
def calculate_score(s1, s2, l1, l2, startpoint):
    # startpoint is the point at which we want to start
    matched = "" # contains string for alignement
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            # if its matching the character
            if s1[i + startpoint] == s2[i]:
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # build some formatted output
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print("")

    return score

calculate_score(s1, s2, l1, l2, 0)
calculate_score(s1, s2, l1, l2, 1)
calculate_score(s1, s2, l1, l2, 5)

# now try to find the best match (highest score)
my_best_align = None
my_best_score = -1

for i in range(l1):
    z = calculate_score(s1, s2, l1, l2, i)
    if z > my_best_score:
        my_best_align = "." * i + s2
        my_best_score = z

print(my_best_align)
print(s1)
print("Best score:", my_best_score)

csvwrite = csv.writer(seq_output)
csvwrite.writerow([my_best_align, my_best_score])
csvwrite.writerow([s1, None])

seq_output.close()
seq_input.close()**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
CAATTCGGAT
ATCGCCGGATTACGGG
-----*****
CAATTCGGAT
ATCGCCGGATTACGGG
5

.------*--*
.CAATTCGGAT
ATCGCCGGATTACGGG
2

.....*---*-----
.....CAATTCGGAT
ATCGCCGGATTACGGG
2

-----*****
CAATTCGGAT
ATCGCCGGATTACGGG
5

.------*--*
.CAATTCGGAT
ATCGCCGGATTACGGG
2

..*---------
..CAATTCGGAT
ATCGCCGGATTACGGG
1

...--------*-
...CAATTCGGAT
ATCGCCGGATTACGGG
1

....*---------
....CAATTCGGAT
ATCGCCGGATTACGGG
1

.....*---*-----
.....CAATTCGGAT
ATCGCCGGATTACGGG
2

......--***--*--
......CAATTCGGAT
ATCGCCGGATTACGGG
4

**********************************************************************

Code ran without errors

Time consumed = 0.06443s

======================================================================
Inspecting script file sysargv.py...

File contents are:
**********************************************************************
#!usr/bin/env python3
#
#Author: Dominic Brass
#Script: sysargv.py
#Arguements: As many strings as required.
#Date: Oct 2018

"""Script that demonstrates the use of sys.argv."""

import sys
print("This is the name of the script: ", sys.argv[0])
print("Number of arguements:", len(sys.argv))
print("The arguements are:", str(sys.argv))**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
('This is the name of the script: ', 'sysargv.py')
('Number of arguements:', 1)
('The arguements are:', "['sysargv.py']")

**********************************************************************

Code ran without errors

Time consumed = 0.01382s

======================================================================
Inspecting script file align_seqs_fasta.py...

File contents are:
**********************************************************************
#!/usr/bin/python

"""Aligns two sequences to find maximal matchings for input sequences."""

__appname__ = '[align_seqs_fasta.py]'
__author__ = 'Dominic Brass'

import csv
import copy
import itertools
import sys

if len(sys.argv) == 3:
    with open(sys.argv[1]) as f:
        next(f) # Skip header line.
        seq1 = [line.rstrip('\n') for line in f]
else:
    with open("../Data/fasta/407228326.fasta") as f:
        next(f) # Skip header line.
        seq1 = [line.rstrip('\n') for line in f]

seq1 = list(itertools.chain.from_iterable(seq1))
seq1 = ''.join(map(str, seq1))

if len(sys.argv) == 3:
    with open(sys.argv[2]) as f:
        next(f) # Skip header line.
        seq2 = [line.rstrip('\n') for line in f]
else:
    with open("../Data/fasta/407228412.fasta") as f:
        next(f) # Skip header line.
        seq2 = [line.rstrip('\n') for line in f]

seq2 = list(itertools.chain.from_iterable(seq2))
seq2 = ''.join(map(str, seq2))


seq_output = open('../Results/Seq_out_fasta.csv', 'w')

print(seq1)

# These are the two sequences to match

# assign the longest sequence s1, and the shortest to s2
# l1 is the length of the longest, l2 that of the shortest

l1 = len(seq1)
l2 = len(seq2)
if l1 >= l2:
    s1 = seq1
    s2 = seq2
else:
    s1 = seq2
    s2 = seq1
    l1, l2 = l2, l1 # swap the two lengths

# function that computes a score
# by returning the number of matches 
# starting from arbitrary startpoint
def calculate_score(s1, s2, l1, l2, startpoint):
    # startpoint is the point at which we want to start
    matched = "" # contains string for alignement
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            # if its matching the character
            if s1[i + startpoint] == s2[i]:
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # build some formatted output
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print("")

    return score

calculate_score(s1, s2, l1, l2, 0)
calculate_score(s1, s2, l1, l2, 1)
calculate_score(s1, s2, l1, l2, 5)

# now try to find the best match (highest score)
my_best_align = None
my_best_score = -1

for i in range(l1):
    z = calculate_score(s1, s2, l1, l2, i)
    if z > my_best_score:
        my_best_align = "." * i + s2
        my_best_score = z

print(my_best_align)
print(s1)
print("Best score:", my_best_score)

csvwrite = csv.writer(seq_output)
csvwrite.writerow([my_best_align, my_best_score])
csvwrite.writerow([s1, None])
**********************************************************************

Testing align_seqs_fasta.py...

align_seqs_fasta.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
AAAAAAACAAAAAGATACATATATATGATATATCTGATATATGATATATATATGATATATCTGATATATGATATATATATGATATATCTGATATATGATATATATATGATATATCTGATATATGATATATATATGATATATCTGATATATATACATATGGTATACATGAGATACATCATATGTATATATGGTATACATGAGATACATCATATGTATATATGGTATACATGAGATACATCATATGTATATATGGTATACATGAGATACATCATATGTATACATGAGATACATCATATGTATACATGAGATACATCATATGTATACATGAGATACATCATATGTATACATGAGATACATCATATGTATACATGAGATACATCATATGTATACATGAGATACATCATATGTATACATGAGATACATCATATGTATACATGACATACATCATATGTATACATGACATACATCATATGTATACATGACATACATATGTATATATGA
**********************************************************************

Code ran without errors

Time consumed = 2.61723s

======================================================================
Inspecting script file control_flow.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3
#
#Author: Dominic Brass
#Script: control_flow.py
#Arguements: none
#Date: Oct 2018

"""Some functions exemplifing the use of control statements"""

__author__ = 'Dominic Brass (dombrass@googlemail.com)'
__version__ = '0.0.1'

## imports ##
import sys # module to interface our program with the operating system

## constants ##

## functions ##

def even_or_odd(x=0): # if not specified, x should take value 0.

    """Find whether a number is even or odd."""
    if x % 2 == 0:
        return "%d is Even!" % x
    return "%d is Odd!" % x    

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0:
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: 
        return "no divisor found for %d!" % x
    return "The largest divisor of %d is %d" % (x, largest)

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2,x):
        if x % i == 0:
            print("%d is not a prime: %d is a divisor" % (x,i))

            return False
    print ("%d is a prime!" % x)
    return True    

def find_all_primes(x=22):
    """Find all primes up to x"""
    allprimes = []
    for i in range(2, x + 1):
        if is_prime(i):
            allprimes.append(i)
    print("There are %d primes between 2 and %d" % (len(allprimes),x))
    return allprimes

def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if (__name__ == "__main__"):
    """Makes sure the "main" function is called from the command line"""
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
no divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is 
**********************************************************************

Code ran without errors

Time consumed = 0.02959s

======================================================================
Inspecting script file test_control_flow.py...

File contents are:
**********************************************************************
#!/usr/bin/python

"""Example of how to write doctests."""

__appname__ = '[test_control_flow.py]'
__author__ = 'Dominic Brass'

import sys
import doctest # Import the doctest module

def even_or_odd(x=0):
    """Find whether a number x is even or odd.
      
    >>> even_or_odd(10)
    '10 is Even!'
    
    >>> even_or_odd(5)
    '5 is Odd!'
    
    whenever a float is provided, then the closest integer is used:    
    >>> even_or_odd(3.2)
    '3 is Odd!'
    
    in case of negative numbers, the positive is taken:    
    >>> even_or_odd(-2)
    '-2 is Even!'
    
    """
    #Define function to be tested
    if x % 2 == 0:
        return "%d is Even!" % x
    return "%d is Odd!" % x

####### I SUPPRESSED THIS BLOCK: WHY? #######

# def main(argv): 
    # print even_or_odd(22)
    # print even_or_odd(33)
    # return 0

# if (__name__ == "__main__"):
    # status = main(sys.argv)
#############################################
    
doctest.testmod()   # To run with embedded tests
**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.04807s

======================================================================
======================================================================
Finished running scripts

Ran into 1 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 98

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!