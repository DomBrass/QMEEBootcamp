##Runs a simulation involving sampling.
x <- rnorm(50)
doit <-function(x){
x <- sample(x, replace = TRUE)
if(length(unique(x)) > 30){
print(paste("Mean of this sample was:", as.character(mean(x))))
}
}
result <- lapply(1:100, function(i) doit(x))
result <- vector("list", 100)
for( i in 1:100) {
result[[i]] <- doit(x)
}
#Simple script to illustrate R input-output.
#Run line by line to check inputs outputs to understand what is happening.
MyData <- read.csv("../Data/trees.csv", header = TRUE) # import with headers
write.csv(MyData, "../Results/MyData.csv") #write it out as a new file
write.table(MyData[1,], file = "../Results/MyData.csv",append=TRUE) # Append to it
write.csv(MyData, "../Results/MyData.csv", row.names=TRUE) # write row names
write.table(MyData, "../Results/MyData.csv", col.names=FALSE) # ignore column names
setwd("~/QMEE/Week3/Code")
#Simple script to illustrate R input-output.
#Run line by line to check inputs outputs to understand what is happening.
MyData <- read.csv("../Data/trees.csv", header = TRUE) # import with headers
write.csv(MyData, "../Results/MyData.csv") #write it out as a new file
write.table(MyData[1,], file = "../Results/MyData.csv",append=TRUE) # Append to it
write.csv(MyData, "../Results/MyData.csv", row.names=TRUE) # write row names
write.table(MyData, "../Results/MyData.csv", col.names=FALSE) # ignore column names
# A boilerplate R script
MyFunction <- function(Arg1, Arg2){
print(paste("Arguement", as.character(Arg1), "is a", class(Arg1)))
print(paste("Arguement", as.character(Arg2), "is a", class(Arg2)))
return (c(Arg1, Arg2))
}
MyFunction(1,2)
MyFunction("Riki", "Tiki")
# This function calculates heights of trees given distance of each
# from its base and angle to its top, using the trignometric formula.
#
# height = distance * tan(radians)
#
# ARGUEMENTS
# degrees: The angle of elevation of tree
# distance: The distance from the base of tree (e.g., meters)
#
# OUTPUT
# The heights of the tree, same units as "distance"
TreeHeight <- function(degrees, distance){
radians <- degrees * pi / 180
height <- distance * tan(radians)
print(paste("Tree height is:", height))
return (height)
}
TreeData <- read.csv("../Data/trees.csv", header = TRUE, row.names = NULL) # import with headers
TreeData$Tree.Height.m <- TreeHeight(TreeData[, 2], TreeData[, 3])
write.csv(TreeData, "../Results/TreeHts.csv" , row.names = FALSE)
## Some code exemplifying control flow constructs in R
## If statement
a <- TRUE
if (a == TRUE){
print("a is TRUE")
} else {
print ("a is FALSE")
}
## On a single line
z <- runif(1) ## random number
if (z <= 0.5) {
print ("Less than a half")
}
## For loop using a sequence
for (i in 1:100){
j <- i * i
print(paste(i, " squared is", j))
}
## For loop of vecotr of strings
for(species in c('Heliodoxa rubinoides',
'Boissonneaua jardini',
'Sula nebouxxii'))
{
print(paste('The species is', species))
}
## For loop using a vector
v1 <- c("a", "bc", "def")
for (i in v1){
print(i)
}
## While loop
i <- 0
while (i<100){
i <- i+1
print(i^2)
}
i <- 0
while(i < Inf){
if (i == 20){
break}
else{
cat("i equals", i, "\n")
i <- i + 1
}
}
#!/usr/bin/env Rscript
#
# This function calculates heights of trees given distance of each
# from its base and angle to its top, using the trignometric formula.
#
# height = distance * tan(radians)
#
# ARGUEMENTS
# degrees: The angle of elevation of tree
# distance: The distance from the base of tree (e.g., meters)
# input_file: A csv file to read in
#
# OUTPUT
# The heights of the tree, same units as "distance"
TreeHeight <- function(degrees, distance){
radians <- degrees * pi / 180
height <- distance * tan(radians)
print(paste("Tree height is:", height))
return (height)
}
args = commandArgs(trailingOnly=TRUE)
file_name <-tools::file_path_sans_ext(basename(args))
if (length(args)==0) {
stop("At least one argument must be supplied (input file).n", call.=FALSE)
} else if (length(args)==1) {
TreeData <- read.csv(args[1], header = TRUE, row.names = NULL) # import with headers
TreeData$Tree.Height.m <- TreeHeight(TreeData[, 2], TreeData[, 3])
eval(parse(text = paste0("write.csv(TreeData, '../Results/", file_name ,"_treeheights.csv' , row.names = FALSE)")))
}
M <- matrix(runif(1000000), 1000, 1000)
SumAllElements <- function(M){
Dimensions <- dim(M)
Tot <- 0
for (i in 1:Dimensions[1]){
for (j in 1:Dimensions[2]){
Tot <- Tot + M[i,j]
}
}
return (Tot)
}
## This on my computer takes about 1 sec
print(system.time(SumAllElements(M)))
## While this takes about 0.01 sec
print(system.time(sum(M)))
#Example of preallocation.
naive <- function(){
a <- NA
for (i in 1:100000) {
a <- c(a,i)
}
print(a)
}
vectorized <- function(){
b <- rep(NA, 100000){
a[i] <- i
}
print(b)
}
print(system.time(naive))
print(system.time(vectorized))
#Example of preallocation.
naive <- function(){
a <- NA
for (i in 1:100000) {
a <- c(a,i)
}
print(a)
}
vectorized <- function(){
b <- rep(NA, 100000){
b[i] <- i
}
print(b)
}
print(system.time(naive))
print(system.time(vectorized))
naive <- function(){
a <- NA
for (i in 1:100000) {
a <- c(a,i)
}
print(a)
}
vectorized <- function(){
b <- rep(NA, 100000){
b[i] <- i
}
print(b)
}
print(system.time(naive()))
print(system.time(vectorized()))
print(system.time(vectorized()))
vectorized <- function(){
b <- rep(NA, 100000){
b[i] <- i
}
print(b)
}
b <- c(b,i)
vectorized <- function(){
b <- rep(NA, 100000)
for (i in 1:100000) {
b <- c(b,i)
}
print(b)
}
print(system.time(vectorized()))
b[i] <- i
vectorized <- function(){
b <- rep(NA, 100000)
for (i in 1:100000) {
b[i] <- i
}
print(b)
}
print(system.time(naive()))
print(system.time(vectorized()))
#Example of preallocation.
#Naive loop
naive <- function(){
a <- NA
for (i in 1:100000) {
a <- c(a,i)
}
}
#Preallocated version
preallocated <- function(){
b <- rep(NA, 100000)
for (i in 1:100000) {
b[i] <- i
}
}
#Compares run times
print(system.time(naive()))
print(system.time(preallocated()))
## applyy: applying the same function to rows/columns of a matrix
## Build a random matrix
M <- matrix(rnorm(100), 10, 10)
## Take the mean of each row
RowMeans <- apply(M, 1, mean)
print (RowMeans)
## Now the variance
RowVars <- apply(M, 1, var)
print(RowVars)
## By column
ColMeans <- apply(M, 2, var)
print (ColMeans)
SomeOperation <- function(v){
if (sum(v) > 0){
return (v * 100)
}
return (v)
}
M <- matrix(rnorm(100), 10, 10)
print (apply(M, 1, SomeOperation))
SomeOperation <- function(v){
if (sum(v) > 0){
return (v * 100)
}
return (v)
}
M <- matrix(rnorm(100), 10, 10)
print (apply(M, 1, SomeOperation))
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .
rm(list=ls())
stochrickvect <- function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,]<-N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))
}
return(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
Exponential <- function(N0 = 1, r = 1, generations = 10){
#Runs a simulation of exponential growth
N <- rep(NA, generation)
N[1] <- N0
for(t in 2:generations){
N[t] <- N[t-1] * exp(r)
browser()
}
return(N)
}
plot(Exponential(), type = "1", main = "Exponential growth")
Exponential <- function(N0 = 1, r = 1, generations = 10){
#Runs a simulation of exponential growth
N <- rep(NA, generations)
N[1] <- N0
for(t in 2:generations){
N[t] <- N[t-1] * exp(r)
browser()
}
return(N)
}
plot(Exponential(), type = "1", main = "Exponential growth")
Exponential <- function(N0 = 1, r = 1, generations = 10){
#Runs a simulation of exponential growth
N <- rep(NA, generations)
N[1] <- N0
for(t in 2:generations){
N[t] <- N[t-1] * exp(r)
browser()
}
return(N)
}
plot(Exponential(), type = "1", main = "Exponential growth")
## run a simulation that samples from a population and uses try.
x <- rnorm(50)
doit <- function(x){
x <- sample(x, replace = TRUE)
if(length(unique(x)) > 30){
print(paste("Mean of this sample was:", as.character(mean(x))))
}
else{
stop("Couldn't calculate mean: too few unique points!")
}
}
result <- lapply(1:100, function(i) try(doit(x), FALSE)
result <- lapply(1:100, function(i) try(doit(x), FALSE)
)
result <- lapply(1:100, function(i) try(doit(x), FALSE))
result <- vector("list", 100)
for(i in 100){
result[[i]] <- try(doit(x), FALSE)
}
for(i in 100){
result[[i]] <- try(doit(x), FALSE)
}
for(i in 1:100){
result[[i]] <- try(doit(x), FALSE)
}
load("../Data/KeyWestAnnualMeanTemperature.RData")
roe_obs <- cor(ats$Temp[-100],ats$Temp[-1])
roe_val <- rep(NA, 10000)
for(i in 1:10000){
Temp_lag <- sample(ats$Temp, 100)
roe_val[i] <- cor(Temp_lag[-100], Temp_lag[-1])
}
plot(density(roe_val), xlab = "Value of correlation coefficient.", ylab = " Density", main = "Density Kernel for Auto-Correlation of Temperature Data")
abline(v = roe_obs, col = "red")
sum(roe_val > roe_obs)/length(roe_val)
require (raster)
require (maps)
temp1<-matrix(data = rexp(180*360, rate = 10), nrow = 360, ncol = 180)  #random matrix
r<-raster(temp1,xmn=-179.5,xmx=179.5,ymn=-89.5,ymx=89.5,crs="+proj=longlat +datum=WGS84")
plot(r)
map("world",add=T,fill=TRUE, col="white", bg="white")
points(gpdd$long, gpdd$lat)
load("../Data/GPDDFiltered.RData")
temp1<-matrix(data = rexp(180*360, rate = 10), nrow = 360, ncol = 180)  #random matrix
r<-raster(temp1,xmn=-179.5,xmx=179.5,ymn=-89.5,ymx=89.5,crs="+proj=longlat +datum=WGS84")
plot(r)
map("world",add=T,fill=TRUE, col="white", bg="white")
points(gpdd$long, gpdd$lat)
temp1<-matrix(data = rexp(180*360, rate = 10), nrow = 360, ncol = 180)  #random matrix
r<-raster(xmn=-179.5,xmx=179.5,ymn=-89.5,ymx=89.5,crs="+proj=longlat +datum=WGS84")
plot(r)
temp1<-matrix(data = rexp(180*360, rate = 10), nrow = 360, ncol = 180)  #random matrix
r<-raster(temp1,xmn=-179.5,xmx=179.5,ymn=-89.5,ymx=89.5)
plot(r)
temp1<-matrix(data = rexp(180*360, rate = 10), nrow = 360, ncol = 180)  #random matrix
r<-raster(temp1, crs="+proj=longlat +datum=WGS84")
plot(r)
temp1<-matrix(data = rexp(180*360, rate = 10), nrow = 360, ncol = 180)  #random matrix
r<-raster(temp1,xmn=-179.5,xmx=179.5,ymn=-89.5,ymx=89.5,crs="+proj=longlat")
plot(r)
map("world",add=T,fill=TRUE, col="white", bg="white")
plot(r)
r<-raster(temp1,xmn=-179.5,xmx=179.5,ymn=-89.5,ymx=89.5)
plot(r)
map("world",add=T,fill=TRUE, col="white", bg="white")
points(gpdd$long, gpdd$lat)
MyData<- as.matrix(read.csv("../Data/PoundHillData.csv",header = F,  stringsAsFactors = F))
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T,  sep=";", stringsAsFactors = F)
MyData[MyData == ""] = 0
MyData <- t(MyData)
head(MyData)
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F)
head(TempData)
colnames(TempData) <- MyData[1,] # assign column names from original data
head(TempData)
rownames(TempData) <- NULL
head(TempData)
require(reshape2)
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
str(MyWrangledData)
require(dplr)
dplyr::tbl_df(MyWrangledData)
dplyr::glimpse(MyWrangledData)
utils::View(MyWrangledData)
dplyr::slice(MyWrangledData, 10:15)
require(lattice)
require(dplyr)
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
pdf("../Results/Prey_Lattice.pdf", 11.7, 8.3)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF)
graphics.off();
pdf("../Results/Pred_Lattice.pdf", 11.7, 8.3)
densityplot(~log(Prey.mass) | Type.of.feeding.interaction, data=MyDF)
graphics.off();
pdf("../Results/SizeRatio_Lattice.pdf", 11.7, 8.3)
densityplot(~log(Predator.mass/Prey.mass) | Type.of.feeding.interaction, data=MyDF)
graphics.off()
Pop_stat <- group_by(MyDF, Type.of.feeding.interaction) %>%
summarize("Mean Log Predator Mass" = log(mean(Predator.mass)), "Mean Log Prey Mass" = log(mean(Prey.mass)),
"Mean Log Predator Prey Mass Ratio" = log(mean(Predator.mass/Prey.mass)),
"Median Log Predator Mass" = log(median(Predator.mass)), "Median Log Prey Mass" = log(median(Prey.mass)),
"Median Log Predator Prey Mass Ratio" = log(median(Predator.mass/Prey.mass)) ) %>%
rename("Feeding Type" = Type.of.feeding.interaction )
write.csv(Pop_stat, file = "../Results/PP_results.csv", row.names = FALSE)
