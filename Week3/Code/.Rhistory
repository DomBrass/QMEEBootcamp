p_obs <- cor(ats$Temp[-100],ats$Temp[-1])
p_val <- rep(NA, 10000)
load("../Data/KeyWestAnnualMeanTemperature.RData")
setwd("~/QMEE/Week3/Code")
load("../Data/KeyWestAnnualMeanTemperature.RData")
p_obs <- cor(ats$Temp[-100],ats$Temp[-1])
p_val <- rep(NA, 10000)
for(i in 1:10000){
Temp_lag <- sample(ats$Temp, 100)
p_val[i] <- cor(ats$Temp, Temp_lag)
}
plot(density(p_val))
sum(p_val > p_obs)/length(p_val)
length(p_val[p_val>p_obs])
line(p_obs)
abline(a =p_obs)
plot(density(p_val))
abline(a =p_obs)
abline(a =p_obs , b = 0)
abline(a =0 , b = p_obs)
plot(density(p_val))
abline(a =0 , b = p_obs)
p_obs <- cor(ats$Temp[-100],ats$Temp[-1])
p_obs <- cor(ats$Temp[-100],ats$Temp[-1])
p_val <- rep(NA, 10000)
load("../Data/KeyWestAnnualMeanTemperature.RData")
roe_obs <- cor(ats$Temp[-100],ats$Temp[-1])
roe_val <- rep(NA, 10000)
for(i in 1:10000){
Temp_lag <- sample(ats$Temp, 100)
roe_val[i] <- cor(ats$Temp, Temp_lag)
}
plot(density(p_val))
abline(a =0 , b = p_obs)
sum(roe_val > roe_obs)/length(roe_val)
load("../Data/KeyWestAnnualMeanTemperature.RData")
roe_obs <- cor(ats$Temp[-100],ats$Temp[-1])
roe_val <- rep(NA, 10000)
for(i in 1:10000){
Temp_lag <- sample(ats$Temp, 100)
roe_val[i] <- cor(ats$Temp, Temp_lag)
}
plot(density(roe_val))
abline(a =0 , b = roe_obs)
sum(roe_val > roe_obs)/length(roe_val)
abline(v = roe_obs)
abline(v = roe_obs, colour = "red")
abline(v = roe_obs, color = "red")
?abline()
abline(v = roe_obs, col = "red")
load("../Data/KeyWestAnnualMeanTemperature.RData")
roe_obs <- cor(ats$Temp[-100],ats$Temp[-1])
roe_val <- rep(NA, 10000)
for(i in 1:10000){
Temp_lag <- sample(ats$Temp, 100)
roe_val[i] <- cor(ats$Temp, Temp_lag)
}
plot(density(roe_val))
abline(v = roe_obs, col = "red")
sum(roe_val > roe_obs)/length(roe_val)
load("../Data/KeyWestAnnualMeanTemperature.RData")
roe_obs <- cor(ats$Temp[-100],ats$Temp[-1])
roe_val <- rep(NA, 10000)
for(i in 1:10000){
Temp_lag <- sample(ats$Temp, 100)
roe_val[i] <- cor(ats$Temp, Temp_lag)
}
plot(density(roe_val), x = "Value of correlation coefficient.", y = " Density", main = "Density Kernel for Auto-Correlation of Temperature Data")
abline(v = roe_obs, col = "red")
sum(roe_val > roe_obs)/length(roe_val)
?plot()
load("../Data/KeyWestAnnualMeanTemperature.RData")
roe_obs <- cor(ats$Temp[-100],ats$Temp[-1])
roe_val <- rep(NA, 10000)
for(i in 1:10000){
Temp_lag <- sample(ats$Temp, 100)
roe_val[i] <- cor(ats$Temp, Temp_lag)
}
plot(density(roe_val), xlab = "Value of correlation coefficient.", ylab = " Density", main = "Density Kernel for Auto-Correlation of Temperature Data")
abline(v = roe_obs, col = "red")
sum(roe_val > roe_obs)/length(roe_val)
library(dplyr)
library(tidyverse)
library(readr)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE) # header = true because we do have metadata headers
View(MyData)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
############# Inspect the dataset ###############
dplyr::tbl_df(MyData) #like head(MyData)
dplyr::glimpse(MyData) # like str(MyData)
fix(MyData) #you can also do this
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- t(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
View(TempData)
MyWrangledData <- gather(TempData, key = Species, value = Count)
library(dplyr)
library(tidyverse)
library(readr)
MyWrangledData <- gather(TempData, key = Species, value = Count)
?gather()
library(tidyr)
MyWrangledData <- gather(TempData, key = Species, value = Count)
View(MyWrangledData)
MyWrangledData <- gather(TempData, key = -c(Cultivation, BLock, Plot, Quadrat), value = Count)
View(MyWrangledData)
?gather()
MyWrangledData <- gather(TempData, key = -Cultivation, value = Count)
View(MyWrangledData)
MyWrangledData <- gather(TempData, key = values -Cultivation, value = Count)
View(MyWrangledData)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE) %>%
spread()
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)
View(MyData)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)%>%
gather(Species, 1:60)
View(MyMetaData)
View(MyData)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)%>%
gather(Species, 2:60)
View(MyData)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)%>%
gather(Species, 2:60)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)%>%
gather(Species, 3:60)
View(ats)
View(MyData)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)%>%
gather("Species", 3:60)
View(MyData)
?separate()
View(MyData)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)%>%
separate(2:60, c("Cultivation", "Block", "Plot", "Quadrat"))
View(MyData)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)%>%
separate(2:60, c("Cultivation", "Block", "Plot", "Quadrat"))
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)%>%
separate(2 c("Cultivation", "Block", "Plot", "Quadrat"))
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)%>%
separate(2, c("Cultivation", "Block", "Plot", "Quadrat"))
View(MyData)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)%>%
spread(c("Cultivation", "Block", "Plot", "Quadrat"))
?spread()
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)%>%
spread(2:60, c("Cultivation", "Block", "Plot", "Quadrat"))
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)%>%
spread(2, c("Cultivation", "Block", "Plot", "Quadrat"))
View(MyData)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)%>%
spread(1, c("Cultivation", "Block", "Plot", "Quadrat"))
View(MyData)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)%>%
separate(1, c("Cultivation", "Block", "Plot", "Quadrat"))
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)%>%
separate(2, c("Cultivation", "Block", "Plot", "Quadrat"))
View(MyData)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)%>%
separate(3, c("Cultivation", "Block", "Plot", "Quadrat"))
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)%>%
separate(63, c("Cultivation", "Block", "Plot", "Quadrat"))
View(MyData)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)
MyData <- t(MyData)
View(MyData)
####################################################################
###### Wrangling the Pound Hill Dataset using dplyr and tidyr ######
####################################################################
library(dplyr)
library(tidyverse)
library(readr)
library(tidyr)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
############# Inspect the dataset ###############
dplyr::tbl_df(MyData) #like head(MyData)
dplyr::glimpse(MyData) # like str(MyData)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- t(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
############# Convert raw matrix to data frame ###############
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
############# Convert from wide to long format  ###############
MyWrangledData <- gather(TempData, key = values -Cultivation, value = Count)
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.numeric(MyWrangledData[, "Count"])
############# Start exploring the data (extend the script below)!  ###############
####################################################################
###### Wrangling the Pound Hill Dataset using dplyr and tidyr ######
####################################################################
library(dplyr)
library(tidyverse)
library(readr)
library(tidyr)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
############# Inspect the dataset ###############
dplyr::tbl_df(MyData) #like head(MyData)
dplyr::glimpse(MyData) # like str(MyData)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- t(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
############# Convert raw matrix to data frame ###############
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
############# Convert from wide to long format  ###############
MyWrangledData <- gather(TempData, key = values -Cultivation, value = Count)
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.numeric(MyWrangledData[, "Count"])
############# Start exploring the data (extend the script below)!  ###############
View(TempData)
View(MyWrangledData)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- read_csv("../Data/PoundHillData.csv", col_names = FALSE)
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
View(MyData)
require(ggplot2)
require(dplyr)
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
ggplot(data = MyDF, aes(x = log(Prey.mass), y = log(Predator.mass)))+
geom_point()+
geom_smooth(method='lm',formula=y~x) +
facet_wrap(~Type.of.feeding.interaction, ncol = 1)
ggplot(data = MyDF, aes(x = log(Prey.mass), y = log(Predator.mass)))+
geom_point()+
geom_smooth(method='lm',formula=y~x) +
facet_wrap(~Type.of.feeding.interaction, ncol = 1) +
scale_y_continuous(labels = scientific)
require(ggplot2)
require(dplyr)
ggplot(data = MyDF, aes(x = log(Prey.mass), y = log(Predator.mass)))+
geom_point()+
geom_smooth(method='lm',formula=y~x) +
facet_wrap(~Type.of.feeding.interaction, ncol = 1) +
scale_y_continuous(labels = scientific)
ggplot(data = MyDF, aes(x = log(Prey.mass), y = log(Predator.mass)))+
geom_point()+
geom_smooth(method='lm',formula=y~x) +
facet_wrap(~Type.of.feeding.interaction, ncol = 1) +
scale_y_continuous(labels = scales::scientific)
ggplot(data = MyDF, aes(x = log(Prey.mass), y = log(Predator.mass)))+
geom_point()+
geom_smooth(method='lm',formula=y~x) +
facet_wrap(~Type.of.feeding.interaction, ncol = 1) +
scale_y_continuous(labels = scales::scientific)
ggplot(data = MyDF, aes(x = log(Prey.mass), y = log(Predator.mass)))+
geom_point()+
geom_smooth(method='lm',formula=y~x) +
facet_wrap(~Type.of.feeding.interaction, ncol = 1) +
scale_y_continuous(labels = scales::scientific) +
scale_x_continuous(labels = scales::scientific)
ggplot(data = MyDF, aes(x = log(Prey.mass), y = log(Predator.mass)))+
geom_point()+
geom_smooth(method='lm',formula=y~x) +
facet_wrap(~Type.of.feeding.interaction, ncol = 1) +
scale_y_continuous(labels = scales::scientific) +
scale_x_continuous(labels = scales::scientific)
ggplot(data = MyDF, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage))+
geom_point()+
geom_smooth(method='lm',formula=y~x) +
facet_wrap(~Type.of.feeding.interaction, ncol = 1) +
scale_y_continuous(labels = scales::scientific) +
scale_x_continuous(labels = scales::scientific)
ggplot(data = MyDF, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage))+
geom_point()+
geom_smooth(method='lm',formula=y~x) +
facet_wrap(~Type.of.feeding.interaction, ncol = 1) +
scale_y_continuous(labels = scales::scientific) +
scale_x_continuous(labels = scales::scientific)
ggplot(data = MyDF, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage))+
geom_point()+
geom_smooth(method='lm',formula=y~x, fullrange = TRUE) +
facet_wrap(~Type.of.feeding.interaction, ncol = 1) +
scale_y_continuous(labels = scales::scientific) +
scale_x_continuous(labels = scales::scientific)
ggplot(data = MyDF, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage))+
geom_point()+
scale_shape_manual(values=3)+
geom_smooth(method='lm',formula=y~x, fullrange = TRUE) +
facet_wrap(~Type.of.feeding.interaction, ncol = 1) +
scale_y_continuous(labels = scales::scientific) +
scale_x_continuous(labels = scales::scientific)
ggplot(data = MyDF, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage))+
geom_point(shape = 3)+
geom_smooth(method='lm',formula=y~x, fullrange = TRUE) +
facet_wrap(~Type.of.feeding.interaction, ncol = 1) +
scale_y_continuous(labels = scales::scientific) +
scale_x_continuous(labels = scales::scientific)
ggplot(data = MyDF, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage))+
geom_point(shape = 3)+
geom_smooth(method='lm',formula=y~x, fullrange = TRUE) +
facet_wrap(~Type.of.feeding.interaction, ncol = 1, strip.position = "right") +
scale_y_continuous(labels = scales::scientific) +
scale_x_continuous(labels = scales::scientific)
ggplot(data = MyDF, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage))+
geom_point(shape = 3)+
geom_smooth(method='lm',formula=y~x, fullrange = TRUE) +
facet_wrap(~Type.of.feeding.interaction, ncol = 1, strip.position = "right") +
scale_y_continuous(labels = scales::scientific) +
scale_x_continuous(labels = scales::scientific) +
theme(legend.position="bottom")
ggplot(data = MyDF, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage))+
geom_point(shape = 3)+
geom_smooth(method='lm',formula=y~x, fullrange = TRUE) +
facet_wrap(~Type.of.feeding.interaction, ncol = 1, strip.position = "right") +
scale_y_continuous(name = "Prey Mass in grams", labels = scales::scientific) +
scale_x_continuous(labels = scales::scientific) +
theme(legend.position="bottom")
ggplot(data = MyDF, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage))+
geom_point(shape = 3)+
geom_smooth(method='lm',formula=y~x, fullrange = TRUE) +
facet_wrap(~Type.of.feeding.interaction, ncol = 1, strip.position = "right") +
scale_y_continuous(name = "Prey Mass in grams", labels = scales::scientific) +
scale_x_continuous(name = "Predator Mass in grams", labels = scales::scientific) +
theme(legend.position="bottom")
ggplot(data = MyDF, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage))+
geom_point(shape = 3)+
geom_smooth(method='lm',formula=y~x, fullrange = TRUE) +
facet_wrap(~Type.of.feeding.interaction, ncol = 1, strip.position = "right") +
scale_y_continuous(name = "Prey Mass in grams", labels = scales::scientific, limits = c(1e-06,1e+06)) +
scale_x_continuous(name = "Predator Mass in grams", labels = scales::scientific) +
theme(legend.position="bottom")
ggplot(data = MyDF, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage))+
geom_point(shape = 3)+
geom_smooth(method='lm',formula=y~x, fullrange = TRUE) +
facet_wrap(~Type.of.feeding.interaction, ncol = 1, strip.position = "right") +
scale_y_continuous(name = "Prey Mass in grams", labels = scales::scientific, limits = c(-1e+06,1e+06)) +
scale_x_continuous(name = "Predator Mass in grams", labels = scales::scientific) +
theme(legend.position="bottom")
ggplot(data = MyDF, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage))+
geom_point(shape = 3)+
geom_smooth(method='lm',formula=y~x, fullrange = TRUE) +
facet_wrap(~Type.of.feeding.interaction, ncol = 1, strip.position = "right") +
scale_y_continuous(name = "Prey Mass in grams", labels = scales::scientific, limits = c(1e-06,1e+06)) +
scale_x_continuous(name = "Predator Mass in grams", labels = scales::scientific) +
theme(legend.position="bottom")
ggplot(data = MyDF, aes(x = log(Prey.mass), y = log(Predator.mass), colour = Predator.lifestage))+
geom_point(shape = 3)+
geom_smooth(method='lm',formula=y~x, fullrange = TRUE) +
facet_wrap(~Type.of.feeding.interaction, ncol = 1, strip.position = "right") +
scale_y_continuous(name = "Prey Mass in grams", labels = scales::scientific) +
scale_x_continuous(name = "Predator Mass in grams", labels = scales::scientific) +
theme(legend.position="bottom")
load("../Data/KeyWestAnnualMeanTemperature.RData")
roe_obs <- cor(ats$Temp[-100],ats$Temp[-1])
roe_val <- rep(NA, 10000)
for(i in 1:10000){
Temp_lag <- sample(ats$Temp, 100)
roe_val[i] <- cor(ats$Temp, Temp_lag)
}
plot(density(roe_val), xlab = "Value of correlation coefficient.", ylab = " Density", main = "Density Kernel for Auto-Correlation of Temperature Data")
abline(v = roe_obs, col = "red")
sum(roe_val > roe_obs)/length(roe_val)
